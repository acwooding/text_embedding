{
    "yelp": {
        "action": "fetch_and_process",
        "load_function_args": [],
        "load_function_kwargs": {},
        "load_function_module": "src.data.localdata",
        "load_function_name": "process_yelp",
        "rescale": null,
        "url_list": [
            {
                "file_name": "yelp_dataset.tar.gz",
                "hash_type": "sha1",
                "hash_value": "096ac5ced8a9229ecc5116e77b6be8d8f90fdacb",
                "name": null
            },
            {
                "contents": "\nYelp Dataset JSON\n\nEach file is composed of a single object type, one JSON-object per-line.\n\nTake a look at some examples to get you started: https://github.com/Yelp/dataset-examples.\n\nNote: the follow examples contain inline comments, which are technically not valid JSON. This is done here to simplify the documentation and explaining the structure, the JSON files you download will not contain any comments and will be fully valid JSON.\nbusiness.json\n\nContains business data including location data, attributes, and categories.\n\n{\n    // string, 22 character unique string business id\n    \"business_id\": \"tnhfDv5Il8EaGSXZGiuQGg\",\n\n    // string, the business's name\n    \"name\": \"Garaje\",\n\n    // string, the neighborhood's name\n    \"neighborhood\": \"SoMa\",\n\n    // string, the full address of the business\n    \"address\": \"475 3rd St\",\n\n    // string, the city\n    \"city\": \"San Francisco\",\n\n    // string, 2 character state code, if applicable\n    \"state\": \"CA\",\n\n    // string, the postal code\n    \"postal code\": \"94107\",\n\n    // float, latitude\n    \"latitude\": 37.7817529521,\n\n    // float, longitude\n    \"longitude\": -122.39612197,\n\n    // float, star rating, rounded to half-stars\n    \"stars\": 4.5,\n\n    // interger, number of reviews\n    \"review_count\": 1198,\n\n    // integer, 0 or 1 for closed or open, respectively\n    \"is_open\": 1,\n\n    // object, business attributes to values. note: some attribute values might be objects\n    \"attributes\": {\n        \"RestaurantsTakeOut\": true,\n        \"BusinessParking\": {\n            \"garage\": false,\n            \"street\": true,\n            \"validated\": false,\n            \"lot\": false,\n            \"valet\": false\n        },\n    },\n\n    // an array of strings of business categories\n    \"categories\": [\n        \"Mexican\",\n        \"Burgers\",\n        \"Gastropubs\"\n    ],\n\n    // an object of key day to value hours, hours are using a 24hr clock\n    \"hours\": {\n        \"Monday\": \"10:00-21:00\",\n        \"Tuesday\": \"10:00-21:00\",\n        \"Friday\": \"10:00-21:00\",\n        \"Wednesday\": \"10:00-21:00\",\n        \"Thursday\": \"10:00-21:00\",\n        \"Sunday\": \"11:00-18:00\",\n        \"Saturday\": \"10:00-21:00\"\n    }\n}\n\nreview.json\n\nContains full review text data including the user_id that wrote the review and the business_id the review is written for.\n\n{\n    // string, 22 character unique review id\n    \"review_id\": \"zdSx_SD6obEhz9VrW9uAWA\",\n\n    // string, 22 character unique user id, maps to the user in user.json\n    \"user_id\": \"Ha3iJu77CxlrFm-vQRs_8g\",\n\n    // string, 22 character business id, maps to business in business.json\n    \"business_id\": \"tnhfDv5Il8EaGSXZGiuQGg\",\n\n    // integer, star rating\n    \"stars\": 4,\n\n    // string, date formatted YYYY-MM-DD\n    \"date\": \"2016-03-09\",\n\n    // string, the review itself\n    \"text\": \"Great place to hang out after work: the prices are decent, and the ambience is fun. It's a bit loud, but very lively. The staff is friendly, and the food is good. They have a good selection of drinks.\",\n\n    // integer, number of useful votes received\n    \"useful\": 0,\n\n    // integer, number of funny votes received\n    \"funny\": 0,\n\n    // integer, number of cool votes received\n    \"cool\": 0\n}\n\nuser.json\n\nUser data including the user's friend mapping and all the metadata associated with the user.\n\n{\n    // string, 22 character unique user id, maps to the user in user.json\n    \"user_id\": \"Ha3iJu77CxlrFm-vQRs_8g\",\n\n    // string, the user's first name\n    \"name\": \"Sebastien\",\n\n    // integer, the number of reviews they've written\n    \"review_count\": 56,\n\n    // string, when the user joined Yelp, formatted like YYYY-MM-DD\n    \"yelping_since\": \"2011-01-01\",\n\n    // array of strings, an array of the user's friend as user_ids\n    \"friends\": [\n        \"wqoXYLWmpkEH0YvTmHBsJQ\",\n        \"KUXLLiJGrjtSsapmxmpvTA\",\n        \"6e9rJKQC3n0RSKyHLViL-Q\"\n    ],\n\n    // integer, number of useful votes sent by the user\n    \"useful\": 21,\n\n    // integer, number of funny votes sent by the user\n    \"funny\": 88,\n\n    // integer, number of cool votes sent by the user\n    \"cool\": 15,\n\n    // integer, number of fans the user has\n    \"fans\": 1032,\n\n    // array of integers, the years the user was elite\n    \"elite\": [\n        2012,\n        2013\n    ],\n\n    // float, average rating of all reviews\n    \"average_stars\": 4.31,\n\n    // integer, number of hot compliments received by the user\n    \"compliment_hot\": 339,\n\n    // integer, number of more compliments received by the user\n    \"compliment_more\": 668,\n\n    // integer, number of profile compliments received by the user\n    \"compliment_profile\": 42,\n\n    // integer, number of cute compliments received by the user\n    \"compliment_cute\": 62,\n\n    // integer, number of list compliments received by the user\n    \"compliment_list\": 37,\n\n    // integer, number of note compliments received by the user\n    \"compliment_note\": 356,\n\n    // integer, number of plain compliments received by the user\n    \"compliment_plain\": 68,\n\n    // integer, number of cool compliments received by the user\n    \"compliment_cool\": 91,\n\n    // integer, number of funny compliments received by the user\n    \"compliment_funny\": 99,\n\n    // integer, number of writer compliments received by the user\n    \"compliment_writer\": 95,\n\n    // integer, number of photo compliments received by the user\n    \"compliment_photos\": 50\n}\n\ncheckin.json\n\nCheckins on a business.\n\n{\n    // nested object of the day of the week with key of\n    // the hour (using a 24hr clock) with the count of checkins\n    // for that hour (e.g. 14:00 - 14:59).\n    \"time\": {\n        \"Wednesday\": {\n            \"14:00\": 2,\n            \"16:00\": 1,\n            \"2:00\": 1,\n            \"0:00\": 1\n        },\n        \"Sunday\": {\n            \"16:00\": 8,\n            \"14:00\": 3,\n            \"15:00\": 3,\n            \"13:00\": 1,\n            \"18:00\": 2,\n            \"23:00\": 1,\n            \"21:00\": 1,\n            \"17:00\": 2\n        },\n        \"Friday\": {\n            \"16:00\": 1,\n            \"13:00\": 1,\n            \"11:00\": 2,\n            \"23:00\": 2\n        },\n    },\n\n    // string, 22 character business id, maps to business in business.json\n    \"business_id\": \"tnhfDv5Il8EaGSXZGiuQGg\"\n}\n\ntip.json\n\nTips written by a user on a business. Tips are shorter than reviews and tend to convey quick suggestions.\n\n{\n    // string, text of the tip\n    \"text\": \"Secret menu - fried chicken sando is da bombbbbbb Their zapatos are good too.\",\n\n    // string, when the tip was written, formatted like YYYY-MM-DD\n    \"date\": \"2013-09-20\",\n\n    // integer, how many likes it has\n    \"likes\": 172,\n\n    // string, 22 character business id, maps to business in business.json\n    \"business_id\": \"tnhfDv5Il8EaGSXZGiuQGg\",\n\n    // string, 22 character unique user id, maps to the user in user.json\n    \"user_id\": \"49JhAJh8vSQ-vM4Aourl0g\"\n}\n\nphoto.json\n\nContains photo data including the caption and classification (one of \"food\", \"drink\", \"menu\", \"inside\" or \"outside\").\n\n{\n    // string, 22 character unique photo id\n    \"photo_id\": \"_nN_DhLXkfwEkwPNxne9hw\",\n\n\n    // string, 22 character business id, maps to business in business.json\n    \"business_id\" : \"tnhfDv5Il8EaGSXZGiuQGg\",\n\n    // string, the photo caption, if any\n    \"caption\" : \"carne asada fries\",\n\n    // string, the category the photo belongs to, if any\n    \"label\" : \"food\"\n}\n",
                "file_name": "yelp.readme",
                "hash_type": "sha1",
                "hash_value": "f686e70bab08a995ec7098a342cb76294439a59c",
                "name": "DESCR"
            }
        ]
    }
}